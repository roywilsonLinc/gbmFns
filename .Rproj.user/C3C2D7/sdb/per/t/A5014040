{
    "contents" : "#'GBM plot of main effects with data distribution overlay.\n#'\n#'\\code{gbm.effectplot} plots marginal effect for important variables.\n#'\n#'@param gbm.model A gbm model to be plotted.\n#'@param relimp.range A vector of length 2 giving upper and lower\n#'\trelative importance cut-offs\n#'@param y.label name of response variable  \n#'@param num.row Number of rows in output plot\n#'@param num.col Number of columns in output plot\n\n#'@return plot of main effects of gbm model.\n#'@examples\n#'\\dontrun{\n#'gbm.effectplot(gbm.model=gbm.model,\n#'relimp.range=c(1,100),num.row=4,num.col=4)\n#'}\n\n\n#'@import gbm\n#'@import reshape2\n#'@import cowplot\n#'@export gbm.effectplot\n########################################\n\ngbm.effectplot <- function(gbm.model,relimp.range,y.label,num.row,num.col){\n  \n  gbm.sum.all <- summary(gbm.model,plotit=F)\n  \n  #reduce gbm.sum based on relimp.range and re-order\n  gbm.sum <- gbm.sum.all[((gbm.sum.all$rel.inf>relimp.range[1])&(gbm.sum.all$rel.inf<=relimp.range[2])),]\n  \n  name.summary <- as.vector(gbm.sum$var)\n  \n  vec.pos <- rep(NA,times=length(name.summary))\n  \n  for(i in 1:length(name.summary)){\n    vec.pos[i] <- which(gbm.model$var.names==name.summary[i])\n  }\n  \n  #create dataframe from gbm input############################################\n  x.mat <- matrix(gbm.model$data$x,length(gbm.model$data$y),length(gbm.model$data$x)/length(gbm.model$data$y))\n  colnames(x.mat) <- gbm.model$var.names\n  \n  df <- as.data.frame(x.mat)\n  \n  #Assign factor class to factor inputs\n  factor.vec <- which(sapply(gbm1$var.levels,class)==\"character\")\n  \n  df[,factor.vec] <- lapply(df[,factor.vec],function(x){as.factor(x)})\n  \n  #character vector of variable classes\n  df2 <- df[,name.summary,drop=FALSE]\n  var.classes <- unlist(lapply(df2,class))\n  \n  \n  #create marginal mappings\n  plot.dat.ls <- list()\n  \n  for(i in 1:length(vec.pos)){\n    plot.dat.ls[[i]] <-  \t\n      plot(gbm.model,i.var=vec.pos[i],return.grid=T)\n  }\n  \n  #kernel density estimation and rescaling of density to fit plots\n  #define numeric vs factor components of dataframe\n  var.classes.num <- ifelse(var.classes==\"factor\",0,1)\n  \n  plot.kernel.ls <- list()\n  \n  for(i in 1:length(vec.pos)){\n    \n    if(var.classes[i]==\"factor\"){plot.kernel.ls[[i]] <- NA}else\n      \n    {\n      #create kernel density estimate for binary classifier\n      categorical.dist <- c(\"bernoulli\",\"huberized\",\"multinomial\",\"adaboost\")\n      \n      if(gbm.model$distribution%in%categorical.dist){\n        \n        df.kern.ls <- list()\n        unique.y <- sort(unique(gbm.model$data$y))\n        \n        for(j in 1:length(unique.y)){\n          df.kern.tmp <- data.frame(density(df2[which(gbm.model$data$y==unique.y[j]),names(plot.dat.ls[[i]])[1]],na.rm=T)[c(\"x\",\"y\")])\n          label.m <- length(gbm.model$data$y[gbm.model$data$y==unique.y[j]])/length(gbm.model$data$y) \n          df.y.scale <- (max(plot.dat.ls[[i]][,2])-min(plot.dat.ls[[i]][,2]))/(max(df.kern.tmp$y)-min(df.kern.tmp$y))\n          df.kern.tmp$y.scaled <- df.kern.tmp$y*df.y.scale*label.m + (min(plot.dat.ls[[i]][,2])-min(df.kern.tmp$y))\n          df.kern.tmp$category <- unique.y[j]\n          df.kern.ls[[j]] <- df.kern.tmp\n        }\n        df.kern <- do.call(\"rbind\",df.kern.ls)\n        plot.kernel.ls[[i]] <- df.kern\n      }else\n        \n      {\n        df.kern <- data.frame(density(df2[,names(plot.dat.ls[[i]])[1]],na.rm=T)[c(\"x\",\"y\")])\n        df.y.scale <- (max(plot.dat.ls[[i]][,2])-min(plot.dat.ls[[i]][,2]))/(max(df.kern$y)-min(df.kern$y))\n        df.kern$y.scaled <- df.kern$y*df.y.scale + (min(plot.dat.ls[[i]][,2])-min(df.kern$y))\n        plot.kernel.ls[[i]] <- df.kern\n      }\n      \n    }\n    \n  }\n  \n  plot.ls <- list()\n  \n  for(i in 1:length(vec.pos)){\n    plot.ls[[i]] <-\n      if(var.classes[i]==\"factor\")\n      {\n        ggplot(plot.dat.ls[[i]], aes_string(x=names(plot.dat.ls[[i]])[1], \n                                            y=\"y\"))+geom_boxplot()+ylab(y.label)+coord_flip()\n      }else\n        \n      {\n        \n        if(gbm.model$distribution%in%categorical.dist){\n          \n          plot.kernel.ls[[i]]$category <- as.factor(plot.kernel.ls[[i]]$category)\n          \n          ggplot()+\n            geom_line(data=plot.kernel.ls[[i]],lty=2,\n                      aes_string(x=names(plot.kernel.ls[[i]])[1], \n                                 y=names(plot.kernel.ls[[i]])[3],colour=\"category\"))+\n            geom_line(data=plot.dat.ls[[i]],aes_string(x=names(plot.dat.ls[[i]])[1], \n                                                       y=\"y\"))+\n            ylab(y.label)+xlab(names(plot.dat.ls[[i]])[1])+\n            xlim(quantile(df2[,names(plot.dat.ls[[i]])[1]],probs=c(0.02,0.98),na.rm=T))\n          \n        }else{\n          \n          ggplot(plot.dat.ls[[i]], aes_string(x=names(plot.dat.ls[[i]])[1], \n                                              y=\"y\"))+ylab(y.label)+geom_line()+\n            xlim(quantile(df2[,names(plot.dat.ls[[i]])[1]],probs=c(0.02,0.98),na.rm=T))+\n            geom_line(data=plot.kernel.ls[[i]],col=4,lty=2,aes_string(x=names(plot.kernel.ls[[i]])[1],y=names(plot.kernel.ls[[i]])[3]))\n        }\n      }\n  }\n  \n  return(plot_grid(plotlist = plot.ls, nrow=num.row, ncol=num.col))\n  \n}\n\n\n\n",
    "created" : 1444739026559.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "431026784",
    "id" : "A5014040",
    "lastKnownWriteTime" : 1444719252,
    "path" : "~/Dropbox (Personal)/Linc Research/Code/RProjects/packages/gbmFns/R/gbm.effectplot.R",
    "project_path" : "R/gbm.effectplot.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}